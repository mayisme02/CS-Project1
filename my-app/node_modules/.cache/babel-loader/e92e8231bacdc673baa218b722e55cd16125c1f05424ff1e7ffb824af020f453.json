{"ast":null,"code":"var _jsxFileName = \"C:\\\\CS-Project1\\\\my-app\\\\src\\\\components\\\\Login.js\";\nimport { createUserWithEmailAndPassword, getAuth, getRedirectResult, GoogleAuthProvider, signInWithPopup, FacebookAuthProvider } from \"firebase/auth\";\nimport { auth, db } from \"../firebase/firebase.js\";\nimport { doc, setDoc } from \"firebase/firestore\";\nimport { useRef } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst provider = new GoogleAuthProvider();\nconst facebookProvider = new FacebookAuthProvider();\nconst Login = () => {\n  // ฟังก์ชัน Login ด้วย Google\n  const handleGoogleLogin = async () => {\n    try {\n      var _userDocRef$get;\n      const result = await signInWithPopup(auth, provider);\n      const user = result.user;\n\n      // เช็คว่า user นี้มีข้อมูลใน Firestore หรือยัง\n      const userDocRef = doc(db, \"users\", user.uid);\n      const userDoc = await ((_userDocRef$get = userDocRef.get) === null || _userDocRef$get === void 0 ? void 0 : _userDocRef$get.call(userDocRef));\n      if (!userDoc || !userDoc.exists()) {\n        // ถ้ายังไม่มีข้อมูลให้เพิ่ม user ลง Firestore\n        await setDoc(userDocRef, {\n          username: user.displayName || \"No Name\",\n          email: user.email,\n          telephone: \"\"\n        });\n      }\n      console.log(\"Google login successful, user:\", user.uid);\n    } catch (error) {\n      console.error(\"Google login error:\", error);\n    }\n  };\n\n  // Login ด้วย Facebook\n  const handleFacebookLogin = async () => {\n    try {\n      const result = await signInWithPopup(auth, facebookProvider);\n      const user = result.user;\n      const userDocRef = doc(db, \"users\", user.uid);\n      const userDoc = await getDoc(userDocRef);\n      if (!userDoc.exists()) {\n        await setDoc(userDocRef, {\n          username: user.displayName || \"No Name\",\n          email: user.email,\n          telephone: \"\"\n        });\n      }\n      console.log(\"Facebook login successful:\", user.uid);\n    } catch (error) {\n      console.error(\"Facebook login error:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGoogleLogin,\n      children: \"Login with Google\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFacebookLogin,\n      children: \"Login with Facebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["createUserWithEmailAndPassword","getAuth","getRedirectResult","GoogleAuthProvider","signInWithPopup","FacebookAuthProvider","auth","db","doc","setDoc","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","provider","facebookProvider","Login","handleGoogleLogin","_userDocRef$get","result","user","userDocRef","uid","userDoc","get","call","exists","username","displayName","email","telephone","console","log","error","handleFacebookLogin","getDoc","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/CS-Project1/my-app/src/components/Login.js"],"sourcesContent":["\r\nimport { createUserWithEmailAndPassword, getAuth, getRedirectResult, GoogleAuthProvider, signInWithPopup, FacebookAuthProvider } from \"firebase/auth\";\r\nimport { auth, db } from \"../firebase/firebase.js\"; \r\nimport { doc, setDoc } from \"firebase/firestore\";\r\nimport { useRef } from \"react\";\r\n\r\nconst provider = new GoogleAuthProvider();\r\nconst facebookProvider = new FacebookAuthProvider();\r\n\r\nconst Login = () => {\r\n    \r\n       // ฟังก์ชัน Login ด้วย Google\r\n      const handleGoogleLogin = async () => {\r\n        try {\r\n          const result = await signInWithPopup(auth, provider);\r\n          const user = result.user;\r\n    \r\n          // เช็คว่า user นี้มีข้อมูลใน Firestore หรือยัง\r\n          const userDocRef = doc(db, \"users\", user.uid);\r\n          const userDoc = await userDocRef.get?.();\r\n    \r\n          if (!userDoc || !userDoc.exists()) {\r\n            // ถ้ายังไม่มีข้อมูลให้เพิ่ม user ลง Firestore\r\n            await setDoc(userDocRef, {\r\n              username: user.displayName || \"No Name\",\r\n              email: user.email,\r\n              telephone: \"\",\r\n            });\r\n          }\r\n    \r\n          console.log(\"Google login successful, user:\", user.uid);\r\n        } catch (error) {\r\n          console.error(\"Google login error:\", error);\r\n        }\r\n      };\r\n\r\n      // Login ด้วย Facebook\r\n  const handleFacebookLogin = async () => {\r\n    try {\r\n      const result = await signInWithPopup(auth, facebookProvider);\r\n      const user = result.user;\r\n\r\n      const userDocRef = doc(db, \"users\", user.uid);\r\n      const userDoc = await getDoc(userDocRef);\r\n\r\n      if (!userDoc.exists()) {\r\n        await setDoc(userDocRef, {\r\n          username: user.displayName || \"No Name\",\r\n          email: user.email,\r\n          telephone: \"\",\r\n        });\r\n      }\r\n\r\n      console.log(\"Facebook login successful:\", user.uid);\r\n    } catch (error) {\r\n      console.error(\"Facebook login error:\", error);\r\n    }\r\n  };\r\n\r\n    return (\r\n    <>\r\n        <h2>Login</h2>\r\n      <button onClick={handleGoogleLogin}>Login with Google</button>\r\n      <button onClick={handleFacebookLogin}>Login with Facebook</button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Login;"],"mappings":";AACA,SAASA,8BAA8B,EAAEC,OAAO,EAAEC,iBAAiB,EAAEC,kBAAkB,EAAEC,eAAe,EAAEC,oBAAoB,QAAQ,eAAe;AACrJ,SAASC,IAAI,EAAEC,EAAE,QAAQ,yBAAyB;AAClD,SAASC,GAAG,EAAEC,MAAM,QAAQ,oBAAoB;AAChD,SAASC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE/B,MAAMC,QAAQ,GAAG,IAAIZ,kBAAkB,CAAC,CAAC;AACzC,MAAMa,gBAAgB,GAAG,IAAIX,oBAAoB,CAAC,CAAC;AAEnD,MAAMY,KAAK,GAAGA,CAAA,KAAM;EAEb;EACD,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MAAA,IAAAC,eAAA;MACF,MAAMC,MAAM,GAAG,MAAMhB,eAAe,CAACE,IAAI,EAAES,QAAQ,CAAC;MACpD,MAAMM,IAAI,GAAGD,MAAM,CAACC,IAAI;;MAExB;MACA,MAAMC,UAAU,GAAGd,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEc,IAAI,CAACE,GAAG,CAAC;MAC7C,MAAMC,OAAO,GAAG,QAAAL,eAAA,GAAMG,UAAU,CAACG,GAAG,cAAAN,eAAA,uBAAdA,eAAA,CAAAO,IAAA,CAAAJ,UAAiB,CAAC;MAExC,IAAI,CAACE,OAAO,IAAI,CAACA,OAAO,CAACG,MAAM,CAAC,CAAC,EAAE;QACjC;QACA,MAAMlB,MAAM,CAACa,UAAU,EAAE;UACvBM,QAAQ,EAAEP,IAAI,CAACQ,WAAW,IAAI,SAAS;UACvCC,KAAK,EAAET,IAAI,CAACS,KAAK;UACjBC,SAAS,EAAE;QACb,CAAC,CAAC;MACJ;MAEAC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEZ,IAAI,CAACE,GAAG,CAAC;IACzD,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;;EAED;EACJ,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF,MAAMf,MAAM,GAAG,MAAMhB,eAAe,CAACE,IAAI,EAAEU,gBAAgB,CAAC;MAC5D,MAAMK,IAAI,GAAGD,MAAM,CAACC,IAAI;MAExB,MAAMC,UAAU,GAAGd,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEc,IAAI,CAACE,GAAG,CAAC;MAC7C,MAAMC,OAAO,GAAG,MAAMY,MAAM,CAACd,UAAU,CAAC;MAExC,IAAI,CAACE,OAAO,CAACG,MAAM,CAAC,CAAC,EAAE;QACrB,MAAMlB,MAAM,CAACa,UAAU,EAAE;UACvBM,QAAQ,EAAEP,IAAI,CAACQ,WAAW,IAAI,SAAS;UACvCC,KAAK,EAAET,IAAI,CAACS,KAAK;UACjBC,SAAS,EAAE;QACb,CAAC,CAAC;MACJ;MAEAC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEZ,IAAI,CAACE,GAAG,CAAC;IACrD,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAEC,oBACAtB,OAAA,CAAAE,SAAA;IAAAuB,QAAA,gBACIzB,OAAA;MAAAyB,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChB7B,OAAA;MAAQ8B,OAAO,EAAExB,iBAAkB;MAAAmB,QAAA,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC9D7B,OAAA;MAAQ8B,OAAO,EAAEP,mBAAoB;MAAAE,QAAA,EAAC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eAClE,CAAC;AAEP,CAAC;AAAAE,EAAA,GAzDK1B,KAAK;AA2DX,eAAeA,KAAK;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}